数据类型：字符串、数
数据结构：列表、字典、集合

要改变变量的值，必须将操作的结果关联到变量

方法：Python可对数据执行的操作，调用方法需要句点(.)，如name.title()

print()：如果调用print()的字符串很长，可以在合适的位置分行，只需在每行末尾都加上引号，同时对于除第一行外的其他各行，都在行首加上引号并缩进

字符串：在Python中，用引号括起的都是字符串，引号可以是单引号也可以是双引号，但是注意避免语法错误
1.常用方法
title()：以首字母大写的方式显示每个单词,Ada、ADA、ada经过该方法值是相同的，都是Ada
upper()：将字符串改为全部大写
lower()：将字符串改为全部小写
rstrip()：剔除字符串末尾的空白
lstrip()：剔除字符串开头的空白
strip()：剔除字符串两边的空白
2.f字符串
3.空白泛指任何非打印字符，如空格、制表符(\t)、换行符(\n)

数：整数、浮点数、常量
1.**代表乘方运算
2.将任意两个数相除，结果总是浮点数；无论哪种运算，只要有操作数是浮点数，Python默认得到的总是浮点数。
3.数很大时，可用下划线将其中的数字分组，但Python不会打印其中的下划线，因为存储这种数时，
  Python会忽略其中的下划线，适用于整数和浮点数。
4.Python没有内置的常量类型，表示常量应将变量名全部大写。

注释：清晰、简洁

Python之禅：
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!

列表：
常用方法：
append()：在列表末尾添加新元素
insert(索引，值)：根据索引将值插入列表
pop()：删除列表末尾的元素，并且返回该元素；也可输入索引，删除特定元素，并返回该元素
remove()：如知道要删除的元素的值，可使用该方法；该方法只删除第一个指定的值，
如果要删除的值可能在列表中多次出现，就需要使用循环来确保每个值都删除。
sort():永久性地修改列表元素地排列顺序，按特定顺序排列，
使用参数reverse=True可以将列表按与特定顺序相反的顺序排列
sorted():按特定顺序显示列表元素，同时不影响列表中的原始排列顺序
使用参数reverse=True可以将列表按与特定顺序相反的顺序显示
reverse()：永久性地反转列表元素的排列顺序
len()：获得列表的长度
range():生成一组整数,详见range_note
min()：数字列表的最小值
max()：数字列表的最大值
sum()：数字列表的总和
1.列表通常包含多个元素，因此给列表指定一个表示复数的名称
2.在Python中，第一个列表元素的索引为0，而不是1
3.通过将索引指定为-1，可让Python返回最后一个列表元素，当列表为空时会出现索引错误，
  负数索引返回离列表末尾相应距离的元素,如abc[-3]返回倒数第三个元素
4.del语句可以删除元素，比如del abc[0]
5.使用for循环遍历列表
6.列表解析将for循环和创建新元素的代码合并成一行，并自动附加新元素。
7.建立列表的切片，切片也是列表，详见slice_note
8.遍历切片，也可用for循环
9.复制列表，详见slice_note
10.元组：Python将不能修改的值称为不可变的，而不可变的列表被称为元组,遍历元组也用for循环

if语句：
1.布尔表达式=条件测试
2.只要不满足任何if或则elif中的条件测试，else中的代码就会执行，这可能会引入无效甚至恶意的数据
  如果知道最终要测试的条件，应考虑使用一个elif代码块来代替else代码块
3.if将列表名用作条件表达式时，Python将在列表至少包含一个元素时返回True,并在列表为空时返回False

字典：字典是一系列键值对，与键相关联的值可以是数、字符串、列表乃至字典
1.字典中存储列表或者字典，应当存储在值中
详见dictionary_note

集合：
1.当花括号内没有键值对时，定义的很可能是集合
2.不同于列表和字典，集合不会以特定的顺序存储元素
3.集合的元素类型只能是不可变数据类型，如整数，浮点数，字符串，元组等;列表，字典，集合类型本身都是可变数据类型，不能做集合的元素出现
